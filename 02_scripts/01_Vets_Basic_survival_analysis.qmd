---
title: "Basic survival analysis"
subtitle: "Vets dataset"
author:
  - myself
date: "`r Sys.Date()`"
affiliation-title: "private"
lightbox: true
format:
  html:
    cap-location: bottom
    code-fold: true
    code-tools: true
    code-block-bg: true
    code-line-numbers: true
    toc: true
    toc-location: left
    theme:
      - sandstone
    grid:
      body-width: 1500px
      sidebar-width: 300px
      margin-width: 400px
output:
  html_document:
    toc: yes
    toc_depth: 4
    toc_float: yes
    code_folding: hide
  pdf_document:
    toc: yes
    toc_depth: 4
    keep_tex: true
description: |
# runtime: shiny # set this flag if your report has interactive code snippets
always_allow_html: true
---

# Basic survival analysis

```{r, message=FALSE, warning=FALSE}
library(survival)
library(survminer) # plotting survival curves
```

## 1. Estimating survival functions (unadjusted) and comparing them across strata.

The dataset considers survival times in days for 137 patients from the Veteran’s Administration Lung Cancer Trial cited by Kalbfleisch and Prentice in their text (The Statistical Analysis of Survival Time Data, John Wiley, pp. 223–224, 1980). Failure status is defined by the status variable.

```{r}
# load data
df <- readRDS("../01_data/vets.rds")
head(df)
```

-   Column 1: Treatment (1: standard, 2: test)
-   Column 2: Cell type 1 (1: large, 0: other)
-   Column 3: Cell type 2 (1: adeno, 0: other)
-   Column 4: Cell type 3 (1: small, 0: other)
-   Column 5: Cell type 4 (1: squamous, 0: other)
-   Column 6: Survival time (days)
-   Column 7: Performance Status (0: worst; 100: best)
-   Column 8: Disease duration (months)
-   Column 9: Age
-   Column 10: Prior therapy (0: none, 10: some)
-   Column 11: Status (0: censored, 1: died)

-   **Numeric features:**

    -   Survival time 
    -   Disease duration
    -   Age
    -   Performance Status
    -   Disease duration (months)


-   **Categorical features:**

    -   ct1-4
    -   Prior therapy 
    -   Status
    -   Treatment
    -   Prior therapy

```{r, message=FALSE}
#The function Surv creates a survival object in R :
Surv(df$survt,df$status==1)
```
Generate an Intercept-only model as baseline:

```{r}
# intercept-only model
Y <- Surv(df$survt, df$status==1) # creates a survival object 
kmfit1 <- survfit(Y ~ 1)
summary(kmfit1, times = seq(from = 0, by = 50, length.out = 10))
```
Generate a model considering treatment as the only factor:
```{r}
#| echo: false
#| fig-width: 15
#| fig-height: 8
# Fit a survival model based on treatment
df$tx <- factor(as.numeric(df$tx), levels = c(1, 2), labels = c("standard", "test")) 
kmfit_tx <- survival::survfit(formula = Y ~ tx, data = df)
# print a summary
summary(kmfit_tx, times = seq(from = 0, by = 50, length.out = 10))

# Define output file name and plot subtitle
outName <- "KM_vets_tx.jpg"
submainer <- "KM by treatment. Time to death"
myLegends <- unique(df$tx)

# Create and save Kaplan-Meier plot
path <- "../03_output/02_figs/"
jpeg(file = file.path(path, outName), width = 15, height = 9.25, units = 'in', res = 500)

km_plot <- ggsurvplot(
 kmfit_tx,
 break.x.by = 50,
 break.y.by = 0.1,
 xlab = "Time (days)",
 ylab = "Survival probability",
 xlim = c(0, 1000),
 ylim = c(0, 1),
 font.x = c(18, "plain", "black"),
 font.y = c(18, "plain", "black"),
 font.tickslab = c(18, "plain", "black"),
 legend.title = "Survival by treatment:",
 legend.labs = myLegends,
 surv.median.line = "hv",
 submain = submainer,
 font.legend = c(20, "plain", "black"),
 conf.int = TRUE,
 pval = TRUE,
 pval.size = 5,
 pval.method = TRUE,
 pval.method.size = 6,
 risk.table = TRUE,
 risk.table.pos = "out",
 risk.table.y.text.col = TRUE,
 risk.table.y.text = TRUE,
 risk.table.fontsize = 4,
 risk.table.height = 0.325
)

print(km_plot)
dev.off()
print(km_plot)
```

```{r}
# Alternative visualization:
plot(kmfit2, lty = c("solid", "dashed"), col=c("black","grey"),
xlab="survival time in days",ylab="survival probabilities")

legend("topright", c("Treatment 1 (standard)","Treatment 2 (test)"), lty=c("solid","dashed"),
col=c("black","grey"))
```

Teh survdiff() tests if there is a difference between the two survival curves:

```{r}
survdiff(Y ~ tx, data=df)
```

There is no statistically significant difference in survival between the two treatment groups (p = 0.9). The observed number of events is nearly identical to what would be expected if there were no treatment effect. Therefore, we fail to reject the null hypothesis that survival is the same across the two groups.

#BIS HIERHIN

A stratified log rank test for CLINIC (stratified by PRISON) can be run with the þ strata(prison) term included in the model formula. With the stratified approach, the observed minus expected number of events are summed over all failure times for each group within each stratum and then summed over all strata.

```{r}
survdiff(Y ~ clinic + strata(prison), data=addicts)
```

The result of this test is very similar to that obtained from the log rank test without stratifying on PRISON.

## 2. Assessing the PH assumption using graphical approaches.

The proportional hazards assumption for CLINIC can be assessed by plotting log-log Kaplan Meier survival estimates against time (or against the log of time) and evaluating whether the curves are reasonably parallel.

```{r}
plot(kmfit2, fun = "cloglog", lty = c("solid", "dashed"), col=c("black","grey"),
xlab="time in days using logarithmic scale",ylab="log-log survival",
main = "log-log curves by clinic")

legend("topleft", c("Clinic 1","Clinic 2"), lty=c("solid","dashed"),
col=c("black","grey"))
```

The plot suggests that the proportional hazards assumption is violated as the log-log survival curves are not parallel.

Alternative visualization: log-log survival vs time (non-log scale):

```{r}
kmfit3=summary(kmfit2)
kmfit4=data.frame(kmfit3$strata,kmfit3$time,kmfit3$surv)
names(kmfit4)=c("clinic","time","survival")
clinic1=kmfit4[kmfit4$clinic=="clinic=1", ]
clinic2=kmfit4[kmfit4$clinic=="clinic=2", ]

plot(clinic1$time,log(-log(clinic1$survival)),xlab="survival time in days",ylab="log-log survival",xlim=c(0,800),col="black",type="l",lty="solid",main="log-log curves by clinic")
par(new=T)
plot(clinic2$time,log(-log(clinic2$survival)),axes=F,xlab="survival time in days",ylab="log-log survival",col="grey50",type="l",lty= "dashed")
legend("bottomright", c("Clinic 1", "Clinic 2"), lty = c("solid", "dashed"),col=c("black","grey50"))
par(new=F)
```

The plot suggests that the proportional hazards assumption is violated for CLINIC.

## 3. Running a Cox PH model.

```{r}
summary(coxph(Y ~ prison + dose + clinic, data=addicts))
```

The estimated hazard ratio for CLINIC=1 vs CLINIC=2 is 2.7453 (the reciprocal of 0.3643).

```{r}
1/0.3643
```

Next, test two interaction (product) terms with PRISON and test the significance of the interaction terms simultaneously with a likelihood ratio test. The following code creates two objects (called mod1 and mod2) that contain information obtained from the coxph function for the no interaction model (mod1 – the reduced model) and the model with the two interaction terms (mod2 – the full model)

```{r}
mod1=coxph(Y ~ prison + dose + clinic,data=addicts)
mod2=coxph(Y ~ prison + dose + clinic + clinic*prison
+ clinic*dose, data=addicts)
mod2
```

Next we wish to perform a likelihood ratio test on the two interaction terms. To calculate the test statistic, we need to subtract the log-likelihood of the full model (with the interaction terms) from the reduced model (without the interaction terms) and multiply that difference by negative 2.

```{r}
lrt.surv=function(mod.full,mod.reduced,df) {
  lrts=(-2)*(mod.full$loglik[2]- mod.reduced$loglik[2])
  pvalue=1-pchisq(lrts,df)
  return(pvalue)
}

LRT <- (-2)*(mod1$loglik[2]-mod2$loglik[2])
LRT
```

We get the output: 3.6, which is the likelihood ratio test statistic. Under the null, this test statistic follows a chisquare distribution with two degrees of freedom. We can use the pchisq function to obtain a p-value for this test.

```{r}
lrt.surv(mod1, mod2, 2) #p-value for a two degree of freedom chi-square test.
```

The p-value is not significant at the 0.05 level of significance.

## 4. Running a stratified Cox model.

If the proportional hazards assumption is violated for the variable CLINIC but met for PRISON and DOSE, a stratified Cox model can be performed with CLINIC the stratified variable. The coxph function includes a strata() option in the model formula. First we define the response variable Y with the Surv function and then the coxph function is used to run a stratified Cox model.

```{r}
coxph(Y ~ prison + dose + strata(clinic), data=addicts)

coxph(Y ~ prison + dose + clinic:prison + clinic:dose +
strata(clinic), data=addicts)
```

Suppose we wish to estimate the hazard ratio for PRISON=1 vs. PRISON=0 for CLINIC=2. This hazard ratio can be estimated by exponentiating the coefficient for prison plus 2 times the coefficient for the CLINIC\* PRISON interaction term. This expression is obtained by substituting the appropriate values into the hazard in both the numerator (for PRISON=1) and denominator (for PRISON=0)

In this example, we are interested in a hazard ratio PRISON=1 versus PRISON=0 for CLINIC=2. We can define a new variable CLINIC x 2 so when CLINIC=2, CLINIC x 2=0.

```{r}
addicts$clinic2 <- addicts$clinic-2
summary(coxph(Y ~ prison + dose + clinic2:prison +
clinic2:dose + strata(clinic2),data=addicts))
```

The estimate for exp(b1) can be found in the second table, exp(coef) for prison = 0.9203. The lower and upper confidence limits are 0.4346 and 1.9603, respectively. If we did not recode the variable CLINIC the problem would have been more complicated in that we would have had to use variance–covariance matrix (which can be obtained with the vcov function) to calculate a 95% confidence interval for this hazard ratio.

## 5. Assessing the PH assumption with a statistical test.

The cox.zph function is designed to perform a statistical test on the proportional hazards assumption. This statistical test is a test of correlation between the Schoenfeld residuals and survival time (or ranked survival time). A correlation of zero supports the proportional hazards assumption (the null hypothesis).

```{r}
mod1=coxph(Y ~ prison + dose + clinic, data=addicts)
cox.zph(mod1,transform=rank)
```

The significant p-value offers evidence that the proportional hazards assumption is not satisfied for the variable CLINIC. The p-values for PRISON and DOSE are not significant suggesting that there is not enough evidence to reject the proportional hazards assumption for PRISON and DOSE. The global test (4th row) tests the proportional hazards assumption for the entire model (i.e., for all three predictor variables simultaneously) and is significant with p = 0.005. The global test offers evidence that the proportional hazards assumption is violated for this model.

```{r}
plot(cox.zph(mod1,transform=rank),se=F,var="clinic")
```

If the PH assumption is met then the fitted curve should look horizontal because the Schoenfeld residuals would be independent of survival time. However, the fitted curve slopes downward.

## 6. Obtaining Cox-adjusted survival curves.

Adjusted survival curves generally depend on the pattern of covariates. Suppose we are interested in plotting the survival curve for the pattern PRISON=0, DOSE=70, and CLINIC=2.

```{r}
pattern1=data.frame(prison=0,dose=70,clinic=2)
#summary(survfit(mod1,newdata=pattern1))

plot(survfit(mod1,newdata=pattern1),conf.int=F,main="Adjusted
survival for prison=0, dose=70, clinic=2")
```

Stratified Cox adjusted survival curves can be obtained by first running a stratified Cox model (stratified by CLINIC):

```{r}
mod3=coxph(Y ~ prison + dose + strata(clinic),data=addicts)
```

To obtain stratified Cox adjusted curves controlling for PRISON and DOSE, we create a one observation dataframe with the mean values of 0.46 for PRISON and 60.4 for DOSE:

```{r}
pattern2=data.frame(prison=.46,dose=60.40)
plot(survfit(mod3,newdata=pattern2), conf.int=F, lty = c("solid",
"dashed"), col=c("black","grey"), main="Survival curves for clinic, adjusted for prison and dose")
legend("topright", c("Clinic 1","Clinic 2"), lty=c("solid","dashed"),
col=c("black","grey"))
```

```{r}
plot(survfit(mod3,newdata=pattern2), fun="cloglog", main=
"Log-log curves for cinic, adjusted for prison and dose")
```

```{r}
sum.mod3=summary(survfit(mod3,newdata=pattern2))
sum.mod4=data.frame(sum.mod3$strata,sum.mod3
$time,sum.mod3$surv)
colnames(sum.mod4)=c("clinic","time","survival")
clinic1=sum.mod4[sum.mod4$clinic=="clinic=1", ]
clinic2=sum.mod4[sum.mod4$clinic=="clinic=2", ]

plot(clinic1$time,log(-log(clinic1$survival)),xlab="survival
time in days",ylab="log-log survival",xlim=c(0,800),col=
"black",type="l",lty="solid", main="log-log curves stratified by
clinic, adjusted for prison, dose")
par(new=T)
plot(clinic2$time,log(-log(clinic2$survival)),axes=F,xlab=
"survival time in days",ylab="log-log survival",col="grey50",
type="l",lty="dashed")
legend("bottomright", c("Clinic 1", "Clinic 2"), lty = c("solid",
"dashed"),col=c("black","grey50"))
par(new=F)
```

## 7. Running an extended Cox model.

```{r}
addicts.cp=survSplit(addicts,cut=addicts$survt[addicts$status==1],
end="survt", event="status",start="start",id="PATid")
# The survSplit function creates multiple observations
# for individuals at risk at multiple time points. The
# dataset addicts.cp created above contains 18,708 observations
# from the 238 observations in the addicts dataset
```

Suppose the PH assumption was violated for the variable DOSE and we were interested in defining a time-varying covariate as the product of DOSE and the natural log of time (SURVT). This variable can easily be defined if the dataset is in counting process form with time cutpoints at each event time.

```{r}
addicts.cp$logtdose=addicts.cp$dose*log(addicts.cp$survt)
```

We now have a new variable in the dataset (called LOGTDOSE= ln(DOSE)\*T) that varies over time. We print the dataset for one individual (id=106) who had an event at time=35 days.

```{r}
addicts.cp[addicts.cp$id==106,c("id","start","survt","status",
"dose","logtdose")]

```

Next we run an extended Cox model including the predictors PRISON, DOSE, and CLINIC and the time-dependent variable LOGTDOSE:

```{r}
coxph(Surv(addicts.cp$start,addicts.cp$survt,addicts.cp$status) ~
prison + dose + clinic + logtdose + cluster(id),data=addicts.cp)

```

The Wald test z statistic of 1.64 (p = 1.0e-01 or p=0.10) is not significant for LOGTDOSE, providing no evidence that the proportional hazards assumption is violated for DOSE.

Next we run an extended Cox model with heaviside functions for CLINIC defined about the time cutpoint of 365 days.

```{r}
addicts.cp365=survSplit(addicts,cut=365,end="survt",
event="status",start="start",id="PATid")

# Next we create the two timedependent
# variables (HV1 and HV2). HV1 is defined to
# equal the value of CLINIC if survival time is less than 365
# days and 0 otherwise. HV2 is defined to equal 0 if survival
# time is less than 365 days and equal the value of CLINIC
# otherwise

addicts.cp365$hv1=addicts.cp365$clinic*(addicts.cp365$start<365)
addicts.cp365$hv2=addicts.cp365$clinic*(addicts.cp365$start>=365)

# sort dataset:
addicts.cp365=addicts.cp365[order(addicts.cp365$id,addicts.cp365$start), ]
addicts.cp365[1:10,c("id", "start","survt","status","clinic","hv1","hv2")]
```

```{r}
Y365 <- Surv(addicts.cp365$start,addicts.cp365$survt,
addicts.cp365$status)
coxph(Y365 ~ prison + dose + hv1 + hv2 + cluster(id),
data=addicts.cp365)
```

The estimated hazard ratio (CLINIC=2 vs. CLINIC=1) is 0.632 for days \<365 and 0.160 for days ≧365.

To run an equivalent model with one heaviside function, we need to include the CLINIC variable in the model

```{r}
coxph(Y365 ~ prison + dose + clinic + hv2 + cluster
(id),data=addicts.cp365)
```

The coefficient estimates are different with this model compared to the model with two heaviside functions but the estimated hazard ratios are the same. The estimated hazard ratio (CLINIC=2 vs. CLINIC=1) is 0.632 for days \<365 (exponentiate the coefficient for CLINIC). In order to estimate the hazard ratio for days  365, we need to sum the coefficient estimates for CLINIC and HV2 and then exponentiate (exp(-0.4594 þ -1.3711)) = 0.160). The significant p-value for the estimated coefficient for HV2 of (p = 3.6e-10 or p = 0.0036) suggests that the hazard ratios for CLINIC for the two different time periods are not equal. In other words, the significant p-value provides evidence that the proportional hazard assumption is violated for CLINIC.

## 8. Running parametric models.

Whereas the key assumption of a proportional hazards (PH) model is that hazard ratios are constant over time, the key assumption for an accelerated failure time (AFT) model is that survival time accelerates (or decelerates) by a constant factor when comparing different levels of covariates.

```{r}
# check if log-log curves look straight, so that Weibull distribution assumption is appropriate:
plot(survfit(Y ~ addicts$clinic), fun="cloglog",xlab="time in days using logarithmic scale",ylab="log-log survival", main="log-log curves by clinic")
```

```{r}
# The log–log curves in Section 2 do not look straight but for
# illustration, we shall proceed as if the Weibull assumption
# were appropriate. First an exponential model is run with
# the survreg function. In this model, the Weibull shape
# parameter (p) is forced to equal 1, which forces the hazard
# to be constant. We’ll save the results in an object called
# modpar1:

modpar1=survreg(Surv(addicts$survt,addicts$status) ~ prison + dose + clinic,data=addicts,dist="exponential")
summary(modpar1)
```

The key assumption of an exponential model is that the hazard is constant over time. This is indicated in the output by the statement “Scale fixed at 1” listed under the tables of parameter estimates. The output can be used to estimate the hazard ratio for any subject given a pattern of covariates. Note that R outputs the parameter estimates for the AFT form of the exponential model. Multiply the estimated coefficients by one to get estimates consistent with the PH parameterization of the model (see Chapter. 7). For example, the estimated hazard ratio comparing PRISON=1 vs PRISON=0 is exp(0.2526) = 1.29. The corresponding acceleration factor for an exponential model is just the reciprocal of the hazard ratio, exp(- 0.2526) = 0.78. Having a prison record accelerates the time to event by a factor of 0.78.

```{r}
modpar2=survreg(Surv(addicts$survt,addicts$status)
~ prison + dose + clinic,data=addicts,dist="weibull")
summary(modpar2)

```

The Weibull shape parameter is the reciprocal of what R calls the Scale parameter (estimated at 0.73). An estimate for the Weibull shape parameter can be obtained by taking the reciprocal, 1/0.73 = 1.37. The acceleration factor comparing CLINIC=2 to CLINIC=1 is estimated at exp(0.7090) = 2.03. So, the estimated median survival time (time off heroin) is double for patients enrolled in CLINIC=2 compared to CLINIC=1.

We can use the model results and the predict function to estimate the median (or any other quantile) time to event for any specified pattern of covariates. For example, we can obtain the 25th, 50th, and 75th percentile of survival time estimated from the Weibull model results that we saved in the object modpar2 for an individual who has the covariate pattern PRISON=1, DOSE=50, and CLINIC=1.

```{r}
pattern1=data.frame(prison=1,dose=50,clinic=1)
pct=c(.25,.50,.75)
days=predict(modpar2,newdata=pattern1,type="quantile",p=pct)
cbind(pct,days)
```

The estimated median survival time is 254.2196 days.

```{r}
pct2=0:100/100
days2=predict(modpar2,newdata=pattern1,
type="quantile",p=pct2)
survival=1-pct2
plot(days2,survival,xlab="survival time in days",ylab= "survival
probabilities",main="Weibull survival estimates for prison=0,
dose=40,clinic=1",xlim=c(0,800))
```

Next a log-logistic AFT model is run with the survreg function.

```{r}
modpar3=survreg(Surv(addicts$survt,addicts$status) ~
prison + dose + clinic,data=addicts,dist="loglogistic")
summary(modpar3)
```

From this output, the acceleration factor comparing CLINIC=2 to CLINIC=1 is estimated as exp(0.5806) = 1.79. If the AFT assumption holds for a log logistic model, then the proportional odds assumption holds for the survival function (although the PH assumption will not hold). The proportional odds assumption can be evaluated by plotting the log odds of survival (using KM estimates) against the log of survival time. If the plots look like straight lines for each pattern of covariates then the log logistic distribution is reasonable. If the straight lines are also parallel then the proportional odds and AFT assumptions also hold.

```{r}
kmfit2=survfit(Surv(addicts$survt,addicts$status) ~ addicts$clinic)
plot(log(kmfit2$time),log(kmfit2$surv/(1-kmfit2$surv)))
```

The curves do not look like straight lines or parallel so the proportional odds assumption for CLINIC looks to be violated. We had run the log-logisticmodel earlier for illustration, even though the graph suggests that it is not the appropriate model.

Other distributions supported by the survreg function are the normal (dist=”gaussian”) and the lognormal (dist=”lognormal”) distributions.

## 9. Running frailty models.

Frailty models contain an extra random component designed to account for individual-level differences in the hazard otherwise unaccounted for by the model. The frailty, a, is a multiplicative effect on the hazard assumed to follow some distribution.

R offers three choices for the distribution of the frailty: the gamma, Gaussian, and t distributions. The variance (theta) of the frailty component is a parameter typically estimated by the model. If theta = 0, then there is no frailty.

```{r}
# base model:
Y=Surv(addicts$survt,addicts$status==1)
#coxph(Y ~ prison + dose + strata(clinic),data=addicts)
# frailty model:
coxph(Y ~ prison + dose + strata(clinic) + frailty(id, distribution="gamma"), data=addicts)

```

Under the table of parameter estimates the output indicates that the variance of random effect = 0.00227. The pvalue for the frailty component of 3.1e-01= 0.31 is provided in the third row and right column of the table and indicates that the frailty component is not significant. We conclude that the variance of the random component is zero for this model (i.e., there is no frailty). The parameter estimates for PRISON and DOSE changed minimally in this model compared to the model previously run without the frailty.

Now, suppose the variable CLINIC was unmeasured. If CLINIC was unaccounted for, there may be a source of unobserved heterogeneity that a frailty component might address. The next model omits CLINIC but includes a frailty component and the predictors PRISON and DOSE.

```{r}
summary(coxph(Y ~ prison + dose + frailty(id, distribution="gamma"), data=addicts))
```

The p-value for the frailty is highly significant at 8.6e–3. In this example, the frailty component might be accounting to some extent for the fact that CLINIC was omitted from the model.
